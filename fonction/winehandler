package choix

import (
	"html/template"
	"net/http"
	"projet/json"
	"strings"
)

// Handler pour afficher la liste des vins, incluant la recherche
func WineHandler(w http.ResponseWriter, r *http.Request) {
	// Récupérer la valeur du paramètre de recherche
	searchQuery := r.URL.Query().Get("search")

	// Charger les données du fichier JSON
	vins, err := json.Donner("json/wine-data-set.json")
	if err != nil {
		http.Error(w, "Erreur lors du chargement des données", http.StatusInternalServerError)
		return
	}

	// Filtrer les vins avec des informations non nulles
	filteredVins := filterVins(vins)

	// Si une requête de recherche est présente, filtrer les vins
	if searchQuery != "" {
		filteredVins = filterVinsBySearch(filteredVins, searchQuery)
	}

	// Charger le template HTML
	tmpl, err := template.ParseFiles("template/index.html")
	if err != nil {
		http.Error(w, "Erreur de chargement du template", http.StatusInternalServerError)
		return
	}

	// Passer la variable searchQuery et filteredVins au template
	data := struct {
		Vins        []json.Vins
		SearchQuery string
	}{
		Vins:        filteredVins,
		SearchQuery: searchQuery,
	}

	// Exécuter le template avec les données des vins filtrés et la requête de recherche
	err = tmpl.Execute(w, data)
	if err != nil {
		http.Error(w, "Erreur lors de l'affichage de la page", http.StatusInternalServerError)
	}
}

// Fonction pour filtrer les vins qui n'ont pas d'information vide ou nulle
func filterVins(vins []json.Vins) []json.Vins {
	var filteredVins []json.Vins
	for _, vin := range vins {
		if vin.Title != "" && vin.Description != "" && vin.Price > 0 && vin.Variety != "" {
			filteredVins = append(filteredVins, vin)
		}
	}
	return filteredVins
}

// Fonction pour filtrer les vins selon la recherche par titre
func filterVinsBySearch(vins []json.Vins, searchQuery string) []json.Vins {
	var filteredVins []json.Vins
	for _, vin := range vins {
		// Vérifier si le titre contient la recherche
		if containsIgnoreCase(vin.Title, searchQuery) {
			filteredVins = append(filteredVins, vin)
		}
	}
	return filteredVins
}

// Fonction utilitaire pour comparer de manière insensible à la casse
func containsIgnoreCase(str, substr string) bool {
	return strings.Contains(strings.ToLower(str), strings.ToLower(substr))
}
